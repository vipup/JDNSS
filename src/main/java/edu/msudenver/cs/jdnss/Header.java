
// Generated by delombok at Fri Mar 20 22:19:47 CET 2020
package edu.msudenver.cs.jdnss;

 
import org.apache.logging.log4j.Logger;
import java.util.Arrays;

class Header {
    private final Logger logger = JDNSS.logger;
    private static final int MAXIMUM_VALUE_FOR_TWO_BYTES = 255;
    private static final int QR_BIT = 32768;
    private static final int OPCODE_BITS = 30720;
    private static final int AA_BIT = 1024;
    private static final int TC_BIT = 512;
    private static final int RD_BIT = 256;
    private static final int RA_BIT = 128;
    private static final int AD_BIT = 32;
    private static final int CD_BIT = 16;
    private static final int RCODE_BITS = 15;
    // http://www.networksorcery.com/enp/protocol/dns.htm
    private byte[] header = new byte[12];
    private final int id;
    private final int opcode;
    private final int numQuestions;
    private int numAnswers;
    private int numAuthorities;
    private int numAdditionals;
    private int rcode;
    private boolean TC; // truncation
    private boolean QR; // query
    private boolean AA; // authoritative answer
    private boolean RA; // recursion available
    private final boolean RD; // recursion desired
    private boolean AD; // authenticated data
    private final boolean CD; // checking disabled

    void incrementNumAnswers() {
        numAnswers++;
    }

    void build() {
        checkValidity();
        header[0] = Utils.getByte(id, 2);
        header[1] = Utils.getByte(id, 1);
        header[2] = (byte) ((QR ? 128 : 0) | (opcode << 3) | (AA ? 4 : 0) | (TC ? 2 : 0) | (RD ? 1 : 0));
        header[3] = (byte) ((RA ? 128 : 0) | (AD ? 32 : 0) | (CD ? 16 : 0) | rcode);
        header[4] = Utils.getByte(numQuestions, 2);
        header[5] = Utils.getByte(numQuestions, 1);
        header[6] = Utils.getByte(numAnswers, 2);
        header[7] = Utils.getByte(numAnswers, 1);
        header[8] = Utils.getByte(numAuthorities, 2);
        header[9] = Utils.getByte(numAuthorities, 1);
        header[10] = Utils.getByte(numAdditionals, 2);
        header[11] = Utils.getByte(numAdditionals, 1);
    }

    private void checkValidity() {
        assert opcode == 0;
        boolean good = false;
        for (ErrorCodes errorCode : ErrorCodes.values()) {
            if (rcode == errorCode.getCode()) {
                good = true;
                break;
            }
        }
        assert good;
        assert numAnswers >= 0 && numAnswers <= MAXIMUM_VALUE_FOR_TWO_BYTES;
        assert numAuthorities >= 0 && numAuthorities <= MAXIMUM_VALUE_FOR_TWO_BYTES;
        assert numAdditionals >= 0 && numAdditionals <= MAXIMUM_VALUE_FOR_TWO_BYTES;
        assert numAdditionals >= 0 && numAdditionals <= MAXIMUM_VALUE_FOR_TWO_BYTES;
    }

    Header(byte[] buffer) {
        final int HEADER_LENGTH = 12;
        // only grab the header from the query
        this.header = Arrays.copyOf(buffer, HEADER_LENGTH);
        id = Utils.addThem(buffer[0], buffer[1]);
        numQuestions = Utils.addThem(buffer[4], buffer[5]);
        numAnswers = Utils.addThem(buffer[6], buffer[7]);
        numAuthorities = Utils.addThem(buffer[8], buffer[9]);
        numAdditionals = Utils.addThem(buffer[10], buffer[11]);
        assert numQuestions > 0;
        assert numAnswers == 0;
        assert numAuthorities == 0;
        int flags = Utils.addThem(buffer[2], buffer[3]);
        QR = (flags & QR_BIT) != 0;
        assert !QR;
        opcode = (flags & OPCODE_BITS) >> 11;
        AA = (flags & AA_BIT) != 0;
        assert !AA;
        TC = (flags & TC_BIT) != 0;
        assert !TC;
        RD = (flags & RD_BIT) != 0;
        RA = (flags & RA_BIT) != 0;
        assert !RA;
        AD = (flags & AD_BIT) != 0;
        // can't assert because nslookup doesn't set this but dig does
        // so, we have to unset it
        AD = false;
        // TODO: find out why DNSSEC doesn't set AD
        CD = (flags & CD_BIT) != 0;
        rcode = flags & RCODE_BITS;
        checkValidity();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "Header(logger=" + this.logger + ", header=" + java.util.Arrays.toString(this.getHeader()) + ", id=" + this.getId() + ", opcode=" + this.getOpcode() + ", numQuestions=" + this.getNumQuestions() + ", numAnswers=" + this.getNumAnswers() + ", numAuthorities=" + this.getNumAuthorities() + ", numAdditionals=" + this.getNumAdditionals() + ", rcode=" + this.getRcode() + ", TC=" + this.isTC() + ", QR=" + this.isQR() + ", AA=" + this.isAA() + ", RA=" + this.isRA() + ", RD=" + this.isRD() + ", AD=" + this.isAD() + ", CD=" + this.isCD() + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Header)) return false;
        final Header other = (Header) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$logger = this.logger;
        final java.lang.Object other$logger = other.logger;
        if (this$logger == null ? other$logger != null : !this$logger.equals(other$logger)) return false;
        if (!java.util.Arrays.equals(this.getHeader(), other.getHeader())) return false;
        if (this.getId() != other.getId()) return false;
        if (this.getOpcode() != other.getOpcode()) return false;
        if (this.getNumQuestions() != other.getNumQuestions()) return false;
        if (this.getNumAnswers() != other.getNumAnswers()) return false;
        if (this.getNumAuthorities() != other.getNumAuthorities()) return false;
        if (this.getNumAdditionals() != other.getNumAdditionals()) return false;
        if (this.getRcode() != other.getRcode()) return false;
        if (this.isTC() != other.isTC()) return false;
        if (this.isQR() != other.isQR()) return false;
        if (this.isAA() != other.isAA()) return false;
        if (this.isRA() != other.isRA()) return false;
        if (this.isRD() != other.isRD()) return false;
        if (this.isAD() != other.isAD()) return false;
        if (this.isCD() != other.isCD()) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof Header;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $logger = this.logger;
        result = result * PRIME + ($logger == null ? 43 : $logger.hashCode());
        result = result * PRIME + java.util.Arrays.hashCode(this.getHeader());
        result = result * PRIME + this.getId();
        result = result * PRIME + this.getOpcode();
        result = result * PRIME + this.getNumQuestions();
        result = result * PRIME + this.getNumAnswers();
        result = result * PRIME + this.getNumAuthorities();
        result = result * PRIME + this.getNumAdditionals();
        result = result * PRIME + this.getRcode();
        result = result * PRIME + (this.isTC() ? 79 : 97);
        result = result * PRIME + (this.isQR() ? 79 : 97);
        result = result * PRIME + (this.isAA() ? 79 : 97);
        result = result * PRIME + (this.isRA() ? 79 : 97);
        result = result * PRIME + (this.isRD() ? 79 : 97);
        result = result * PRIME + (this.isAD() ? 79 : 97);
        result = result * PRIME + (this.isCD() ? 79 : 97);
        return result;
    }

    @java.lang.SuppressWarnings("all")
    public byte[] getHeader() {
        return this.header;
    }

    @java.lang.SuppressWarnings("all")
    public int getId() {
        return this.id;
    }

    @java.lang.SuppressWarnings("all")
    public int getOpcode() {
        return this.opcode;
    }

    @java.lang.SuppressWarnings("all")
    public int getNumQuestions() {
        return this.numQuestions;
    }

    @java.lang.SuppressWarnings("all")
    public int getNumAnswers() {
        return this.numAnswers;
    }

    @java.lang.SuppressWarnings("all")
    public int getNumAuthorities() {
        return this.numAuthorities;
    }

    @java.lang.SuppressWarnings("all")
    void setNumAuthorities(final int numAuthorities) {
        this.numAuthorities = numAuthorities;
    }

    @java.lang.SuppressWarnings("all")
    public int getNumAdditionals() {
        return this.numAdditionals;
    }

    @java.lang.SuppressWarnings("all")
    void setNumAdditionals(final int numAdditionals) {
        this.numAdditionals = numAdditionals;
    }

    @java.lang.SuppressWarnings("all")
    public int getRcode() {
        return this.rcode;
    }

    @java.lang.SuppressWarnings("all")
    void setRcode(final int rcode) {
        this.rcode = rcode;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isTC() {
        return this.TC;
    }

    @java.lang.SuppressWarnings("all")
    void setTC(final boolean TC) {
        this.TC = TC;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isQR() {
        return this.QR;
    }

    @java.lang.SuppressWarnings("all")
    void setQR(final boolean QR) {
        this.QR = QR;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isAA() {
        return this.AA;
    }

    @java.lang.SuppressWarnings("all")
    void setAA(final boolean AA) {
        this.AA = AA;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isRA() {
        return this.RA;
    }

    @java.lang.SuppressWarnings("all")
    void setRA(final boolean RA) {
        this.RA = RA;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isRD() {
        return this.RD;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isAD() {
        return this.AD;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isCD() {
        return this.CD;
    }
}