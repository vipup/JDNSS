// Generated by delombok at Fri Mar 20 22:19:47 CET 2020
package edu.msudenver.cs.jdnss;

import org.apache.logging.log4j.Logger;
import java.util.Base64;
import java.util.Set;
/*
**                                        1  1  1  1  1  1
**          0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
**        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
**        |                                               |
**        /                                               /
**        /                      NAME                     /
**        |                                               |
**        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
**        |                      TYPE                     |
**        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
**        |                     CLASS                     |
**        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
**        |                      TTL                      |
**        |                                               |
**        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
**        |                   length                    |
**        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--|
**        /                     RDATA                     /
**        /                                               /
**        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
*/
abstract class RR {
    static final Logger logger = JDNSS.logger;
    private final String name;
    private final RRCode type;
    private final int rrclass = 1;
    private final int ttl;

    boolean isEmpty() {
        return false;
    }

    RR(final String name, final RRCode type, final int ttl) {
        this.name = name;
        this.type = type;
        this.ttl = ttl;
    }

    // to enhance polymorphism and decrease casting for derived classes
    String getString() {
        assert false;
        return null;
    }

    String getHost() {
        assert false;
        return null;
    }

    /**
     * converts all the internal data to a byte array
     * @return the resource record to put in the response
     */
    public byte[] getBytes(final String question, final int TTLminimum) {
        final int minttl = ttl == 0 ? TTLminimum : ttl;
        final byte[] name = Utils.convertString(question);
        final byte[] rdata = getBytes();
        final int rdatalen = rdata.length;
        final int count = name.length + 2 + 2 + 4 + 2 + rdatalen;
        final byte[] a = new byte[count];
        System.arraycopy(name, 0, a, 0, name.length);
        int where = name.length;
        a[where++] = Utils.getByte(type.getCode(), 2);
        a[where++] = Utils.getByte(type.getCode(), 1);
        a[where++] = Utils.getByte(rrclass, 2);
        a[where++] = Utils.getByte(rrclass, 1);
        a[where++] = Utils.getByte(minttl, 4);
        a[where++] = Utils.getByte(minttl, 3);
        a[where++] = Utils.getByte(minttl, 2);
        a[where++] = Utils.getByte(minttl, 1);
        a[where++] = Utils.getByte(rdatalen, 2);
        a[where++] = Utils.getByte(rdatalen, 1);
        System.arraycopy(rdata, 0, a, where, rdata.length);
        return a;
    }

    protected abstract byte[] getBytes();

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "RR(name=" + this.getName() + ", type=" + this.getType() + ", rrclass=" + this.getRrclass() + ", ttl=" + this.getTtl() + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof RR)) return false;
        final RR other = (RR) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$name = this.getName();
        final java.lang.Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        final java.lang.Object this$type = this.getType();
        final java.lang.Object other$type = other.getType();
        if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
        if (this.getRrclass() != other.getRrclass()) return false;
        if (this.getTtl() != other.getTtl()) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof RR;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final java.lang.Object $type = this.getType();
        result = result * PRIME + ($type == null ? 43 : $type.hashCode());
        result = result * PRIME + this.getRrclass();
        result = result * PRIME + this.getTtl();
        return result;
    }

    @java.lang.SuppressWarnings("all")
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    public RRCode getType() {
        return this.type;
    }

    @java.lang.SuppressWarnings("all")
    public int getRrclass() {
        return this.rrclass;
    }

    @java.lang.SuppressWarnings("all")
    public int getTtl() {
        return this.ttl;
    }
}